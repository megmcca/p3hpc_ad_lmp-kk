#!/usr/bin/env bash

#SBATCH --partition=batch
#SBATCH --account=coreai_devtech_all
## The "1" below was modified by hand for different problem sizes
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=4
#SBATCH --time=30
#SBATCH --output=run-lammps-1node-4gpu-4ib-%J.out
#SBATCH --job-name=[redacted]

export MACHINE=eos
export NGPU=4
export NRANK=$((${NGPU} * ${SLURM_JOB_NUM_NODES}))
export NIB=4

export FIRST_DONE=0

# Extract bits of the directory based on my username, set up the output directories
MY_NAME=$(whoami)
THIS_DIRECTORY=$(pwd)
export OUTPUT_DIR_OUTSIDE=${THIS_DIRECTORY%*${MY_NAME}/*}${MY_NAME}
export OUTPUT_DIR_INSIDE=$OUTPUT_DIR_OUTSIDE
export RELATIVE_DIR=${THIS_DIRECTORY#*${MY_NAME}*}
#export RUN_REL_DIR="/${NSIZE}_${SIZE_STRING}"

# Job information
export BIND_SCRIPT="${OUTPUT_DIR_INSIDE}${RELATIVE_DIR}/bind-slurm.sh"
echo "Bind script location: $BIND_SCRIPT"

# REDACTION: base path
export CONTAINER_IMAGE="[redacted]/nvidia+nvhpc+25.3-devel-cuda_multi-ubuntu22.04.sqsh"

export NVIDIA_DISABLE_REQUIRE=1

# for timing
#export CUDA_LAUNCH_BLOCKING=1

# Specify if we're profiling or not
#export USE_NSYS="NO"
#export USE_NSYS="ONE_RANK"
#export USE_NSYS="ONE_RANK_PER_NODE"
#export USE_NSYS="ALL"
export USE_NSYS="NO"

echo "****** BIND SCRIPT *******"
cat $BIND_SCRIPT
echo "****** BIND SCRIPT *******"

# REDACTION: base path
export EXE=[redacted]/install/bin/lmp

# Figure out duplication factors as a function of number of nodes
case ${SLURM_JOB_NUM_NODES} in
  1) XS=1; YS=1; ZS=1 ;;
  2) XS=2; YS=1; ZS=1 ;;
  4) XS=2; YS=2; ZS=1 ;;
  8) XS=2; YS=2; ZS=2 ;;
  16) XS=4; YS=2; ZS=2 ;;
  32) XS=4; YS=4; ZS=2 ;;
  64) XS=4; YS=4; ZS=4 ;;
  128) XS=8; YS=4; ZS=4 ;;
esac

  echo "********** COMMON INFO ************"
  echo "                 Machine: ${MACHINE}"
  echo "              Node count: ${SLURM_JOB_NUM_NODES}"
  echo "           GPUs per node: ${NGPU}"
  echo "              Total GPUs: "$((${NGPU} * ${SLURM_JOB_NUM_NODES}))
  echo "           NICs per node: $NIB"
  echo "            Node scaling: $XS x $YS x $ZS"
  echo "           Run directory: ${OUTPUT_DIR_OUTSIDE}${RELATIVE_DIR}"
  echo "              Executable: $EXE"
  echo "          Nsys Profiling: $USE_NSYS"
  echo "***********************************"

BASE_STR="${SLURM_JOB_NUM_NODES}node-${NGPU}gpu-${NIB}ib-J${SLURM_JOB_ID}"

for BENCHMARK in lj snap reaxff
do
  for size in 1 2 3 4
  do
    if [[ "$BENCHMARK" == "lj" ]]
    then
      case $size in
        1) X=40; Y=40; Z=40; S="256K" ;;
	2) X=40; Y=80; Z=80; S="1M" ;;
        3) X=80; Y=80; Z=160; S="4M" ;;
        4) X=160; Y=160; Z=160; S="16M" ;;
      esac
      BENCH_SPEC="-v t 1000"
      ARGS="-k on g $NGPU -sf kk -pk kokkos neigh full neigh/qeq full newton off comm device pair/only off gpu/aware on -in in.lj.gpu.steps -nocite -log none"
    elif [[ "$BENCHMARK" == "snap" ]]
    then
      case $size in
        1) X=20; Y=20; Z=20; S="16K" ;;
        2) X=20; Y=40; Z=40; S="64K" ;;
        3) X=40; Y=40; Z=80; S="256K" ;;
        4) X=80; Y=80; Z=80; S="1M" ;;
      esac
      # Per node: 16K, 64K, 256K, 1024K
      BENCH_SPEC="-v t 200"
      ARGS="-k on g $NGPU -sf kk -pk kokkos neigh half neigh/qeq full newton on comm device pair/only off gpu/aware on -in in.snap.steps -nocite -log none"
    else # reaxff
      case $size in
        1) X=8; Y=8; Z=12; S="256K" ;;
        2) X=16; Y=16; Z=12; S="1M" ;;
        3) X=16; Y=32; Z=24; S="4M" ;;
        4) X=32; Y=32; Z=48; S="16M" ;;
      esac
      # Per node: 256K, 1024K = 1M, 4M, 16M      BENCH_SPEC="-v t 100"
      export ARGS="-k on g $NGPU -sf kk -pk kokkos neigh half neigh/qeq full newton on comm device pair/only off gpu/aware on -in in.hns.kokkos_gpu.steps -nocite -log none"
    fi

    BENCH_SPEC="-v x $(($X * $XS)) -v y $(($Y * $YS)) -v z $(($Z * $ZS)) $BENCH_SPEC"
    export RUNSTRING="${BENCHMARK}-${S}-${BASE_STR}"

    echo "************ RUN INFO *************"
    echo "               Benchmark: ${BENCHMARK}"
    echo "         Argument string: ${ARGS}"
    echo "          Benchmark spec: ${BENCH_SPEC}"
    echo "***********************************"

    CONTAINER_NAME="--container-name=lammps-container"
    if [ "$FIRST_DONE" -eq 0 ]
    then
      CONTAINER_NAME="--container-image=${CONTAINER_IMAGE} ${CONTAINER_NAME}"
      export FIRST_DONE=1
    fi

    # for "export UCX_CUDA_COPY_ENABLE_FABRIC=no" see https://github.com/openucx/ucx/pull/10007#issuecomment-2772808309
    srun --nodes=${SLURM_JOB_NUM_NODES} --tasks-per-node=${NGPU} --mpi=pmix \
         ${CONTAINER_NAME} --container-workdir=${OUTPUT_DIR_INSIDE}${RELATIVE_DIR} --container-mounts=${OUTPUT_DIR_OUTSIDE}:${OUTPUT_DIR_INSIDE} \
         bash -c 'module purge && module load nvhpc-hpcx-cuda12/25.3 && export UCX_CUDA_COPY_ENABLE_FABRIC=no && '"${BIND_SCRIPT} $EXE $ARGS $BENCH_SPEC " 2>&1 | tee bench-${RUNSTRING}.out
  done
done

